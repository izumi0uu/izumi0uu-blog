---
import { cva } from "class-variance-authority";
import { cn } from "@/utils/ui/styles";

import type { HTMLAttributes } from "astro/types";
import type { VariantProps } from "class-variance-authority";

// 从React组件中导入而不是重复定义
import { linkVariants } from "@/components/react/ui/Link";

export interface Props extends HTMLAttributes<"a">, VariantProps<typeof linkVariants> {
  /**
   * 是否在新标签页打开链接
   * @default false
   */
  external?: boolean;
  /**
   * 自定义target行为
   * 如果设置了external=true，此属性会被忽略
   */
  target?: string;
  /**
   * 自定义rel属性
   * 如果设置了external=true且没有提供rel，会自动添加"noopener noreferrer"
   */
  rel?: string;
  /**
   * 链接是否禁用
   * @default false
   */
  isDisabled?: boolean;
  /**
   * 链接变体样式
   */
  variant?:
    | "default"
    | "destructive"
    | "outline"
    | "secondary"
    | "ghost"
    | "link"
    | "success"
    | "warning"
    | "info"
    | "primary-container"
    | "secondary-container"
    | "success-container"
    | "error-container"
    | "warning-container"
    | "info-container"
    | "brutal"
    | "brutal-normal"
    | "underline";
}

const {
  class: className,
  variant = "link",
  isDisabled = false,
  external = false,
  target,
  rel,
  size = "default",
  href,
  ...props
} = Astro.props;

const Element = isDisabled ? "span" : "a";

// 处理跳转行为
const linkTarget = external ? "_blank" : target;
const linkRel = external ? rel || "noopener noreferrer" : rel;

// 自动检测外部链接（如果href以http开头且不是当前域名）
const isExternalUrl =
  href &&
  (String(href).startsWith("http://") ||
    String(href).startsWith("https://") ||
    String(href).startsWith("mailto:") ||
    String(href).startsWith("tel:"));

// 最终的target和rel属性
const finalTarget = external || (isExternalUrl && !target) ? "_blank" : target;
const finalRel = external || isExternalUrl ? rel || "noopener noreferrer" : rel;
---

<Element
  class={cn(linkVariants({ variant, isDisabled, size }), className)}
  href={href}
  target={finalTarget}
  rel={finalRel}
  data-astro-link
  {...props}
>
  <slot>
    {href}
  </slot>
</Element>
