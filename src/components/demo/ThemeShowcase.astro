---
// Tailwind v4 主题系统演示组件 - 支持国际化
// 展示新的颜色系统、工具类和主题切换功能

// 获取当前语言，从 URL 路径中提取
const currentPath = Astro.url.pathname;
const isZh = currentPath.startsWith('/zh');

// 定义多语言文本
const texts = {
  title: isZh ? "🎨 Tailwind v4 主题演示" : "🎨 Tailwind v4 Theme Showcase",
  defaultTheme: isZh ? "默认主题" : "Default Theme",
  darkMode: isZh ? "暗色模式" : "Dark Mode", 
  wineTheme: isZh ? "酒红主题" : "Wine Theme",
  wineDark: isZh ? "酒红暗色" : "Wine Dark",
  currentTheme: isZh ? "当前主题" : "Current Theme",
  primaryColors: isZh ? "主色系" : "Primary Colors",
  surfaceSystem: isZh ? "表面系统" : "Surface System", 
  functionalColors: isZh ? "功能色系" : "Functional Colors",
  debugInfo: isZh ? "🔧 调试信息" : "🔧 Debug Info"
};
---

<div class="theme-showcase">
  <!-- 主题切换器 -->
  <div class="mb-8 p-6 surface-container">
    <h2 class="text-2xl font-bold text-on-surface mb-4">{texts.title}</h2>
    <div class="flex flex-wrap gap-4 mb-4">
      <button 
        id="theme-default" 
        class="btn-secondary"
        data-theme="default"
      >
        {texts.defaultTheme}
      </button>
      <button 
        id="theme-dark" 
        class="btn-secondary"
        data-theme="dark"
      >
        {texts.darkMode}
      </button>
      <button 
        id="theme-wine" 
        class="btn-secondary"
        data-theme="wine"
      >
        {texts.wineTheme}
      </button>
      <button 
        id="theme-wine-dark" 
        class="btn-secondary"
        data-theme="wine-dark"
      >
        {texts.wineDark}
      </button>
    </div>
    <p class="text-on-surface-variant text-sm">
      {texts.currentTheme}: <span id="current-theme" class="text-primary font-medium">default</span>
    </p>
  </div>

  <!-- 颜色系统展示 -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
    <!-- 主色系 -->
    <div class="card">
      <h3 class="text-lg font-semibold text-on-surface mb-4">{texts.primaryColors}</h3>
      <div class="space-y-3">
        <div class="flex items-center gap-3">
          <div class="w-8 h-8 rounded bg-primary border border-outline"></div>
          <div>
            <div class="text-sm font-medium text-on-surface">Primary</div>
            <div class="text-xs text-on-surface-variant">var(--color-primary)</div>
          </div>
        </div>
      </div>
    </div>

    <!-- 表面系统 -->
    <div class="card">
      <h3 class="text-lg font-semibold text-on-surface mb-4">{texts.surfaceSystem}</h3>
      <div class="space-y-3">
        <div class="flex items-center gap-3">
          <div class="w-8 h-8 rounded bg-surface border border-outline"></div>
          <div>
            <div class="text-sm font-medium text-on-surface">Surface</div>
            <div class="text-xs text-on-surface-variant">var(--color-surface)</div>
          </div>
        </div>
      </div>
    </div>

    <!-- 功能色系 -->
    <div class="card">
      <h3 class="text-lg font-semibold text-on-surface mb-4">{texts.functionalColors}</h3>
      <div class="space-y-3">
        <div class="flex items-center gap-3">
          <div class="w-8 h-8 rounded border border-outline" style="background-color: var(--color-error);"></div>
          <div>
            <div class="text-sm font-medium text-on-surface">Error</div>
            <div class="text-xs text-on-surface-variant">var(--color-error)</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- 调试信息 -->
  <div class="card mt-6" id="debug-info">
    <h3 class="text-lg font-semibold text-on-surface mb-4">{texts.debugInfo}</h3>
    <div class="text-sm font-mono text-on-surface-variant space-y-1" id="css-variables">
      <!-- JavaScript 动态填充 -->
    </div>
  </div>
</div>

<script>
  // 主题切换功能 - 修复对象格式错误
  function setTheme(themeInput: string | any): void {
    // 安全处理主题值，防止对象传入
    let theme: string;
    
    if (typeof themeInput === 'string') {
      theme = themeInput;
    } else if (themeInput && typeof themeInput === 'object' && themeInput.name) {
      theme = themeInput.name;
    } else {
      theme = String(themeInput);
    }
    
    // 清理可能的JSON字符串
    if (theme.startsWith('{') && theme.endsWith('}')) {
      try {
        const parsed = JSON.parse(theme);
        if (parsed && parsed.name) {
          theme = parsed.name;
        }
      } catch {
        theme = 'default';
      }
    }
    
    // 验证主题值
    const validThemes = ['default', 'dark', 'wine', 'wine-dark'];
    if (!validThemes.includes(theme)) {
      theme = 'default';
    }
    
    console.log(`🎨 设置主题: ${theme}`);
    
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
    
    // 更新当前主题显示
    const currentThemeEl = document.getElementById('current-theme');
    if (currentThemeEl) {
      currentThemeEl.textContent = theme;
    }
    
    // 更新按钮状态
    document.querySelectorAll('[data-theme]').forEach(btn => {
      btn.classList.remove('btn-primary');
      btn.classList.add('btn-secondary');
    });
    
    // 安全地查找对应按钮
    try {
      const escapedTheme = CSS.escape(theme);
      const activeBtn = document.querySelector(`[data-theme="${escapedTheme}"]`);
      if (activeBtn) {
        activeBtn.classList.remove('btn-secondary');
        activeBtn.classList.add('btn-primary');
      }
    } catch (error) {
      console.warn('主题按钮选择器错误:', error);
      // 回退到简单查找
      const allButtons = document.querySelectorAll('[data-theme]');
      for (const btn of allButtons) {
        if (btn.getAttribute('data-theme') === theme) {
          btn.classList.remove('btn-secondary');
          btn.classList.add('btn-primary');
          break;
        }
      }
    }
    
    updateDebugInfo();
  }

  // 更新调试信息
  function updateDebugInfo(): void {
    const debugEl = document.getElementById('css-variables');
    if (!debugEl) return;
    
    const currentTheme = document.documentElement.getAttribute('data-theme') || 'default';
    const styles = getComputedStyle(document.documentElement);
    
    // 根据当前语言显示调试信息
    const isZh = window.location.pathname.startsWith('/zh');
    let debugHtml = `<div class="font-bold mb-2">${isZh ? '当前主题' : 'Current Theme'}: ${currentTheme}</div>`;
    
    // 显示关键颜色变量
    const keyColors = [
      '--color-primary',
      '--color-secondary', 
      '--color-surface',
      '--color-background'
    ];
    
    keyColors.forEach(colorVar => {
      const value = styles.getPropertyValue(colorVar).trim();
      if (value) {
        debugHtml += `<div>${colorVar}: ${value}</div>`;
      }
    });
    
    debugEl.innerHTML = debugHtml;
  }

  // 初始化
  document.addEventListener('DOMContentLoaded', () => {
    console.log('🚀 ThemeShowcase 初始化');
    
    // 安全读取保存的主题
    let savedTheme = localStorage.getItem('theme') || 'default';
    
    // 处理可能损坏的localStorage数据
    try {
      if (savedTheme.startsWith('{')) {
        const parsed = JSON.parse(savedTheme);
        savedTheme = parsed.name || 'default';
        // 修复损坏的数据
        localStorage.setItem('theme', savedTheme);
      }
    } catch {
      console.warn('修复损坏的主题数据');
      savedTheme = 'default';
      localStorage.setItem('theme', 'default');
    }
    
    setTheme(savedTheme);
    
    // 绑定主题切换按钮
    document.querySelectorAll('[data-theme]').forEach(button => {
      button.addEventListener('click', (e: Event) => {
        const target = e.target as HTMLElement;
        const theme = target.getAttribute('data-theme');
        if (theme) {
          setTheme(theme);
        }
      });
    });
    
    // 系统主题检测
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    mediaQuery.addEventListener('change', (e) => {
      const currentTheme = localStorage.getItem('theme');
      if (currentTheme === 'default') {
        setTheme(e.matches ? 'dark' : 'default');
      }
    });
  });
</script>

<style>
  /* 确保自定义变体正常工作 */
  .theme-wine\:block {
    display: none;
  }
  
  :root[data-theme="wine"] .theme-wine\:block {
    display: block;
  }
  
  .theme-wine-dark\:block {
    display: none;
  }
  
  :root[data-theme="wine-dark"] .theme-wine-dark\:block {
    display: block;
  }
</style> 