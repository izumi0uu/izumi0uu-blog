---
/*
* depends on user's browser language setting
 */
import * as i18nConstants from "@/config/i18n";


---

<script is:inline define:vars={{ i18nConstants }}>
 
 const { SUPPORTED_LOCALES, DEFAULT_LOCALE, LOCALE_LABELS, LOCAL_STORAGE_KEY, BROWSER_LANG_REDIRECT_DONE_KEY, PREFIX_DEFAULT_LOCALE } = i18nConstants;

  const initBrowserLanguageRedirectOld = () => {
    const currentPathname = window.location.pathname;
    const currentSearch = window.location.search;
    const currentHash = window.location.hash;
    const origin = window.location.origin;

    // 1. check if user has preferred language in localStorage
    let userPreferredLang = null;
    try {
      userPreferredLang = localStorage.getItem(LOCAL_STORAGE_KEY);
    } catch (e) {
      console.warn(`Could not access localStorage ${LOCAL_STORAGE_KEY}:`, e);
    }

    // if user has preferred language in localStorage, skip browser language redirect
    if (userPreferredLang && SUPPORTED_LOCALES.includes(userPreferredLang)) return;

    // 2. check if browser language redirect has been attempted in this session
    try {
      if (sessionStorage.getItem(BROWSER_LANG_REDIRECT_DONE_KEY)) {
        console.log("Browser language redirect already attempted in this session.");
        return;
      }
    } catch (e) {
      console.warn("Could not access sessionStorage:", e);
    }

    // 3. get browser language and infer user's language preference
    const browserLanguage = navigator.language || navigator.userLanguage || DEFAULT_LOCALE;
    const browserLangCode = browserLanguage.toLowerCase().split("-")[0];
    const browserRegionCode = browserLanguage.toLowerCase().split("-")[1];

    let inferredLang = DEFAULT_LOCALE;

    if (browserLangCode === 'zh') {
      if (['cn', 'hk', 'mo', 'tw'].includes(browserRegionCode)) {inferredLang = 'zh'}
      else {inferredLang = 'en'}
    } else {inferredLang = 'en'}

    if (!SUPPORTED_LOCALES.includes(inferredLang)) inferredLang = DEFAULT_LOCALE;

    // 4. get url locale from pathname
    let currentLangFromUrl = null;
    const pathSegments = currentPathname.split('/').filter(segment => segment);
    
    if (pathSegments.length > 0 && SUPPORTED_LOCALES.includes(pathSegments[0])) {
        currentLangFromUrl = pathSegments[0];
    } else if(!PREFIX_DEFAULT_LOCALE) {
        // if default locale is not prefixed, use default locale from config
        currentLangFromUrl = DEFAULT_LOCALE;
    } else  {
        // currentLangFromUrl is still null
    }

    // 5. if inferredLang is not the same as currentLangFromUrl, redirect
    if (currentLangFromUrl !== inferredLang) {
        let canonicalPath = currentPathname;
        if (currentLangFromUrl && canonicalPath.startsWith(`/${currentLangFromUrl}`))  canonicalPath = currentPathname.substring(`/${currentLangFromUrl}`.length);

        // double check canonicalPath: make sure it starts with '/' or is root
        if(!canonicalPath.startsWith('/') && canonicalPath !== '') canonicalPath = `/${canonicalPath}`;

        // if canonicalPath is empty, set it to root
        if(canonicalPath === "" || canonicalPath === "/") canonicalPath = "/";
    }

    // 6. redirect to inferredLang
    window.location.href = `${origin}${canonicalPath}${currentSearch}${currentHash}`;
}

 const initBrowserLanguageRedirect = () => {
    const currentPathname = window.location.pathname;
    const currentSearch = window.location.search;
    const currentHash = window.location.hash;
    const origin = window.location.origin;

}
  /**
  * @description get user's preferred language from localStorage
  * @returns {string | null} user's preferred language, or null if not found or cannot access localStorage
  */
  const getStoredUserPreferredLang = () => {
    try {
        return localStorage.getItem(LOCAL_STORAGE_KEY);
    } catch (e) {
        console.warn(`i18nScript: Could not access localStorage ${LOCAL_STORAGE_KEY} for user preferred language:`, e);
        return null;
    }
  }

  /**
  * @description check if browser language redirect has been attempted in this session
  * @returns {boolean} true if attempted, false otherwise
  */
  const hasRedirectBeenAttemptedThisSession = () => {
    try {
        return !!sessionStorage.getItem(BROWSER_LANG_REDIRECT_DONE_KEY);
    } catch (e) {
        console.warn("i18nScript: Could not access sessionStorage:", e);
        return false;
    }
  }

  /**
  * @description set browser language redirect already attempted in sessionStorage
  * @returns {void}
  */
  const setRedirectAttemptedThisSession = () => {
    try {
      sessionStorage.setItem(BROWSER_LANG_REDIRECT_DONE_KEY, "true");
    } catch (e) {
      console.warn("i18nScript: Could not access sessionStorage:", e);
    }
  }

  /**
  * @description get browser language and infer user's language preference
  * @returns {string} inferred language
  */
  const inferLangFromBrowser = (supportedLocales, defaultLocale) => {
    const browserLanguage = navigator.language || navigator.userLanguage || defaultLocale;
    const browserLangCode = browserLanguage.toLowerCase().split("-")[0];
    const browserRegionCode = browserLanguage.toLowerCase().split("-")[1];

    let inferredLang = defaultLocale;

    if (browserLangCode === 'zh') {
      if (['cn', 'hk', 'mo', 'tw'].includes(browserRegionCode)) inferredLang = 'zh';
      else inferredLang = 'en';
    } else inferredLang = 'en';

    if (!supportedLocales.includes(inferredLang)) inferredLang = defaultLocale;
    return inferredLang;
  }

  /**
  * @description get url locale from pathname
  * @returns {string} url locale
  */
  const getUrlLocaleFromPathname = (pathName, supportedLocales, defaultLocale,prefixDefaultLocale) => {
    let currentLangFromUrl = null;
    const pathSegments = pathName.split('/').filter(segment => segment);

    if (pathSegments.length > 0 && supportedLocales.includes(pathSegments[0])) {
        // e.g. /en/about -> 'en'
        return pathSegments[0];
      } else if (!prefixDefaultLocale) {
        return defaultLocale;
      }
      return null;
  }

  initBrowserLanguageRedirect();
</script>